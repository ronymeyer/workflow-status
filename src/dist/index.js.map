{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAAsC;AACtC,wCAA0C;AAC1C,iCAOiB;AAEjB,SAAe,GAAG;mCAAI,OAAO;;;YAC3B,IAAI;gBACI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;gBACjD,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;gBACvD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACjC,KAAK,GAAG,wBAAgB,CAAC,OAAO,CAAC,CAAC;gBAClC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBACtC,QAAQ,GAAG,wBAAgB,CAAC,MAAM,CAAC,CAAC;gBACxC,IAAI,QAAQ,KAAK,SAAS,EAAE;oBAC1B,QAAQ,GAAG,qBAAa,EAAE,CAAC;iBAC5B;gBAEK,KAAgB,uBAAe,CAAC,QAAQ,CAAC,EAAxC,KAAK,QAAA,EAAE,IAAI,QAAA,CAA8B;gBAEhD,IAAI,CAAC,IAAI,CAAC,wBAAsB,QAAQ,cAAS,QAAQ,SAAI,MAAQ,CAAC,CAAC;gBAEjE,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAErC,WAAwB,IAAI,CAAC;gBAC7B,eAA4B,IAAI,CAAC;gBAEnC,OAAO,CAAC,IAAI,CAAC,OAAO;qBACvB,gBAAgB,CAAC;oBAChB,KAAK,OAAA;oBACL,IAAI,MAAA;oBACJ,WAAW,EAAE,QAAQ;oBACrB,MAAM,QAAA;oBACN,KAAK,OAAA;oBACL,QAAQ,EAAE,CAAC;iBACZ,CAAC;qBACD,IAAI,CAAC,UAAC,EAAQ;wBAAN,cAAI;;oBACX,cAAc;oBACd,QAAM,eAAG,IAAI,0CAAE,MAAM,uCAAI,IAAI,EAAA,CAAC;oBAC9B,YAAU,eAAG,IAAI,0CAAE,UAAU,uCAAI,IAAI,EAAA,CAAC;gBAC1C,CAAC,CAAC,CAAC;gBAGC,IAAI,QAAM,KAAK,IAAI,IAAI,YAAU,KAAK,IAAI,EAAE;oBAC1C,IAAI,CAAC,IAAI,CAAC,aAAW,QAAQ,CAAC,CAAC;oBAC/B,IAAI,CAAC,IAAI,CAAC,iBAAe,YAAY,CAAC,CAAC;oBAEvC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAM,CAAC,CAAC;oBACjC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,YAAU,CAAC,CAAC;iBAC1C;qBAAM;oBACL,kBAAU,CAAC,yBAAyB,CAAC,CAAC;iBACvC;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,CAAC,SAAS,CAAC,wBAAsB,GAAG,CAAC,OAAS,CAAC,CAAC;aACrD;;;;CACF;AAED,GAAG,EAAE,CAAC","file":"index.js","sourcesContent":["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport {\r\n  getFirst,\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository,\r\n  logWarning,\r\n  waitTime\r\n} from './utils';\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', {required: true});\r\n    const workflow = core.getInput('workflow', {required: true});\r\n    const branch = core.getInput('branch');\r\n    const event = getOptionalInput('event');\r\n    const wait = core.getBooleanInput('wait');\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Checking result of ${workflow} from ${fullRepo}:${branch}`);\r\n\r\n    const octokit = github.getOctokit(token);\r\n\r\n    let status: string | null = null;\r\n    let conclusion: string | null = null;\r\n\r\n      octokit.rest.actions\r\n  .listWorkflowRuns({\r\n    owner,\r\n    repo,\r\n    workflow_id: workflow,\r\n    branch,\r\n    event,\r\n    per_page: 1\r\n  })\r\n  .then(({ data }) => {\r\n    // handle data\r\n    status = data?.status ?? null;\r\n    conclusion = data?.conclusion ?? null;\r\n});\r\n\r\n\r\n    if (status !== null && conclusion !== null) {\r\n      core.info(`status: ${status}`);\r\n      core.info(`conclusion: ${conclusion}`);\r\n\r\n      core.setOutput('status', status);\r\n      core.setOutput('conclusion', conclusion);\r\n    } else {\r\n      logWarning('Workflow run is missing');\r\n    }\r\n  } catch (err) {\r\n    core.setFailed(`Failed with error: ${err.message}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}