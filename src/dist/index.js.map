{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAAsC;AACtC,wCAA0C;AAC1C,iCAOiB;AAEjB,SAAe,GAAG;;mCAAI,OAAO;;;;;;oBAEnB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;oBACjD,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;oBACvD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACjC,KAAK,GAAG,wBAAgB,CAAC,OAAO,CAAC,CAAC;oBAClC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;oBACtC,QAAQ,GAAG,wBAAgB,CAAC,MAAM,CAAC,CAAC;oBACxC,IAAI,QAAQ,KAAK,SAAS,EAAE;wBAC1B,QAAQ,GAAG,qBAAa,EAAE,CAAC;qBAC5B;oBAEK,KAAgB,uBAAe,CAAC,QAAQ,CAAC,EAAxC,KAAK,QAAA,EAAE,IAAI,QAAA,CAA8B;oBAEhD,IAAI,CAAC,IAAI,CAAC,wBAAsB,QAAQ,cAAS,QAAQ,SAAI,MAAQ,CAAC,CAAC;oBAEjE,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAErC,MAAM,GAAkB,IAAI,CAAC;oBAC7B,UAAU,GAAkB,IAAI,CAAC;;wBAK/B,qBAAM,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;wBAC9C,KAAK,OAAA;wBACL,IAAI,MAAA;wBACJ,WAAW,EAAE,QAAQ;wBACrB,MAAM,QAAA;wBACN,KAAK,OAAA;wBACL,QAAQ,EAAE,CAAC;qBACZ,CAAC,EAAA;;oBARO,aAAa,GAClB,CAAA,SAOF,CAAA,mBARoB;oBAUhB,MAAM,GAAG,gBAAQ,CAAC,aAAa,CAAC,CAAC;oBAEvC,MAAM,eAAG,MAAM,0CAAE,MAAM,uCAAI,IAAI,EAAA,CAAC;oBAChC,UAAU,eAAG,MAAM,0CAAE,UAAU,uCAAI,IAAI,EAAA,CAAC;yBAEpC,CAAA,IAAI,IAAI,MAAM,KAAK,WAAW,CAAA,EAA9B,wBAA8B;oBAChC,qBAAM,gBAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,EAAA;;oBAAxB,SAAwB,CAAC;oBACzB,wBAAS;;wBAEJ,KAAK;;;oBAEd,IAAI,MAAM,KAAK,IAAI,IAAI,UAAU,KAAK,IAAI,EAAE;wBAC1C,IAAI,CAAC,IAAI,CAAC,aAAW,MAAQ,CAAC,CAAC;wBAC/B,IAAI,CAAC,IAAI,CAAC,iBAAe,UAAY,CAAC,CAAC;wBAEvC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBACjC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;qBAC1C;yBAAM;wBACL,kBAAU,CAAC,yBAAyB,CAAC,CAAC;qBACvC;;;;oBAED,IAAI,CAAC,SAAS,CAAC,wBAAsB,KAAG,CAAC,OAAS,CAAC,CAAC;;;;;;CAEvD;AAED,GAAG,EAAE,CAAC","file":"index.js","sourcesContent":["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport {\r\n  getFirst,\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository,\r\n  logWarning,\r\n  waitTime\r\n} from './utils';\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', {required: true});\r\n    const workflow = core.getInput('workflow', {required: true});\r\n    const branch = core.getInput('branch');\r\n    const event = getOptionalInput('event');\r\n    const wait = core.getBooleanInput('wait');\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Checking result of ${workflow} from ${fullRepo}:${branch}`);\r\n\r\n    const octokit = github.getOctokit(token);\r\n\r\n    let status: string | null = null;\r\n    let conclusion: string | null = null;\r\n\r\n    do {\r\n      const {\r\n        data: {workflow_runs}\r\n      } = await octokit.rest.actions.listWorkflowRuns({\r\n        owner,\r\n        repo,\r\n        workflow_id: workflow,\r\n        branch,\r\n        event,\r\n        per_page: 1\r\n      });\r\n\r\n      const latest = getFirst(workflow_runs);\r\n\r\n      status = latest?.status ?? null;\r\n      conclusion = latest?.conclusion ?? null;\r\n\r\n      if (wait && status !== 'completed') {\r\n        await waitTime(5 * 1000);\r\n        continue;\r\n      }\r\n    } while (false);\r\n\r\n    if (status !== null && conclusion !== null) {\r\n      core.info(`status: ${status}`);\r\n      core.info(`conclusion: ${conclusion}`);\r\n\r\n      core.setOutput('status', status);\r\n      core.setOutput('conclusion', conclusion);\r\n    } else {\r\n      logWarning('Workflow run is missing');\r\n    }\r\n  } catch (err) {\r\n    core.setFailed(`Failed with error: ${err.message}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}