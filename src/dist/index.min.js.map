{"version":3,"sources":["index.ts"],"names":["core","require","github","utils_1","run","Promise","token","getInput","required","workflow","branch","event","getOptionalInput","getBooleanInput","undefined","fullRepo","getRepository","_a","getOwnerAndRepo","owner","repo","info","octokit","getOctokit","conclusion","status","rest","actions","listWorkflowRuns","workflow_id","per_page","result","_c","sent","data","total_count","workflow_runs","slice","forEach","element","_i","_b","length","latest","setOutput","logWarning","setFailed","ex_1"],"mappings":"y7CAAA,IAAAA,KAAAC,QAAA,iBACAC,OAAAD,QAAA,mBACAE,QAAAF,QAAA,WAUA,SAAeG,mCAAOC,QAAO,0GAqBV,6BAnBTC,EAAQN,KAAKO,SAAS,QAAS,CAACC,UAAU,IAC1CC,EAAWT,KAAKO,SAAS,WAAY,CAACC,UAAU,IAChDE,EAASV,KAAKO,SAAS,UACvBI,EAAQR,QAAAS,iBAAiB,SAClBZ,KAAKa,gBAAgB,aAEjBC,KADbC,EAAWZ,QAAAS,iBAAiB,WAE9BG,EAAWZ,QAAAa,iBAGPC,EAAgBd,QAAAe,gBAAgBH,GAA/BI,EAAKF,EAAA,GAAEG,EAAIH,EAAA,GAElBjB,KAAKqB,KAAK,sBAAsBZ,EAAQ,SAASM,EAAQ,IAAIL,GAEvDY,EAAUpB,OAAOqB,WAAWjB,GAG9BkB,EADAC,EAAwB,KAGb,CAAA,EAAMH,EAAQI,KAAKC,QAC/BC,iBAAiB,CAChBT,MAAKA,EACLC,KAAIA,EACJS,YAAapB,EACbC,OAAMA,EACNC,MAAKA,EACLmB,SAAU,YAad,IApBMC,EAASC,EAAAC,OAUfjC,KAAKqB,KAAK,wBAAwBU,EAAON,OAAM,wBAAwBM,EAAOG,KAAKC,aAEvEJ,EAAOG,KAAKE,cAAcC,MAAM,EAAG,GAEzCC,QAAQ,SAAAC,GAEZvC,KAAKqB,KAAK,iBAAiBkB,EAAQd,QACnCzB,KAAKqB,KAAK,qBAAqBkB,EAAQf,cAGzCgB,EAAA,EAAqBC,EAAAV,EAAOG,KAAKE,cAAZI,EAAAC,EAAAC,OAAAF,IAAVG,EAAMF,EAAAD,GACff,EAASkB,EAAOlB,OAChBD,EAAamB,EAAOnB,WACpBxB,KAAKqB,KAAK,gBAAgBI,GAC1BzB,KAAKqB,KAAK,oBAAoBG,UAMjB,OAAXC,GAAkC,OAAfD,GACrBxB,KAAKqB,KAAK,WAAWI,GACrBzB,KAAKqB,KAAK,eAAeG,GAEzBxB,KAAK4C,UAAU,SAAUnB,GACzBzB,KAAK4C,UAAU,aAAcpB,IAE7BrB,QAAA0C,WAAW,0DAGb7C,KAAK8C,UAAU,sBAAsBC,+BAIzC3C","file":"index.min.js","sourcesContent":["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport {\r\n  getFirst,\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository,\r\n  logWarning,\r\n  waitTime\r\n} from './utils';\r\n\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', {required: true});\r\n    const workflow = core.getInput('workflow', {required: true});\r\n    const branch = core.getInput('branch');\r\n    const event = getOptionalInput('event');\r\n    const wait = core.getBooleanInput('wait');\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Checking result of ${workflow} from ${fullRepo}:${branch}`);\r\n\r\n    const octokit = github.getOctokit(token);\r\n\r\n    let status: string | null = null;\r\n    let conclusion: string | null = null;\r\n\r\n    const result = await octokit.rest.actions\r\n      .listWorkflowRuns({\r\n        owner,\r\n        repo,\r\n        workflow_id: workflow,\r\n        branch,\r\n        event,\r\n        per_page: 1\r\n    });\r\n\r\n    core.info(`Received status code ${result.status}, number or results: ${result.data.total_count}`);\r\n\r\n    var first = result.data.workflow_runs.slice(0, 1);\r\n    \r\n    first.forEach(element => {\r\n      \r\n      core.info(`status loop1: ${element.status}`);\r\n      core.info(`conclusion loop1: ${element.conclusion}`);\r\n    });\r\n\r\n    for (const latest of result.data.workflow_runs) {\r\n      status = latest.status;\r\n      conclusion = latest.conclusion;\r\n      core.info(`status loop: ${status}`);\r\n      core.info(`conclusion loop: ${conclusion}`);\r\n    }\r\n\r\n\r\n\r\n\r\n    if (status !== null && conclusion !== null) {\r\n      core.info(`status: ${status}`);\r\n      core.info(`conclusion: ${conclusion}`);\r\n\r\n      core.setOutput('status', status);\r\n      core.setOutput('conclusion', conclusion);\r\n    } else {\r\n      logWarning('Workflow run is missing');\r\n    }\r\n  } catch (ex) {\r\n    core.setFailed(`Failed with error: ${ex}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}