{"version":3,"sources":["index.ts"],"names":["core","require","github","utils_1","run","Promise","token","getInput","required","workflow","branch","event","getOptionalInput","wait","getBooleanInput","undefined","fullRepo","getRepository","_e","getOwnerAndRepo","owner","repo","info","octokit","getOctokit","conclusion","status","rest","actions","listWorkflowRuns","workflow_id","per_page","workflow_runs","_f","sent","data","latest","getFirst","_b","_a","_d","_c","waitTime","setOutput","logWarning","setFailed","err_1","message"],"mappings":"y7CAAA,IAAAA,KAAAC,QAAA,iBACAC,OAAAD,QAAA,mBACAE,QAAAF,QAAA,WASA,SAAeG,+CAAOC,QAAO,8HAEnBC,EAAQN,KAAKO,SAAS,QAAS,CAACC,UAAU,IAC1CC,EAAWT,KAAKO,SAAS,WAAY,CAACC,UAAU,IAChDE,EAASV,KAAKO,SAAS,UACvBI,EAAQR,QAAAS,iBAAiB,SACzBC,EAAOb,KAAKc,gBAAgB,aAEjBC,KADbC,EAAWb,QAAAS,iBAAiB,WAE9BI,EAAWb,QAAAc,iBAGPC,EAAgBf,QAAAgB,gBAAgBH,GAA/BI,EAAKF,EAAA,GAAEG,EAAIH,EAAA,GAElBlB,KAAKsB,KAAK,sBAAsBb,EAAQ,SAASO,EAAQ,IAAIN,GAEvDa,EAAUrB,OAAOsB,WAAWlB,GAG9BmB,EADAC,EAAwB,sBAMtB,MAAA,CAAA,EAAMH,EAAQI,KAAKC,QAAQC,iBAAiB,CAC9CT,MAAKA,EACLC,KAAIA,EACJS,YAAarB,EACbC,OAAMA,EACNC,MAAKA,EACLoB,SAAU,mBAPHC,EACLC,EAAAC,OAOFC,KAAAH,cAEII,EAASjC,QAAAkC,SAASL,GAElBM,EAAS,QAATC,EAAGH,SAAM,IAAAG,OAAA,EAAAA,EAAEb,OAAjBA,EAAuBY,MAAAA,EAAAA,EAAI,KACjBE,EAAS,QAATC,EAAGL,SAAM,IAAAK,OAAA,EAAAA,EAAEhB,WAArBA,EAA+Be,MAAAA,EAAAA,EAAI,KAE/B3B,GAAmB,cAAXa,EACV,CAAA,EAAMvB,QAAAuC,SAAS,MADb,CAAA,EAAA,UAEF,OADAT,EAAAC,OACA,CAAA,EAAA,UAEK,0BAEM,OAAXR,GAAkC,OAAfD,GACrBzB,KAAKsB,KAAK,WAAWI,GACrB1B,KAAKsB,KAAK,eAAeG,GAEzBzB,KAAK2C,UAAU,SAAUjB,GACzB1B,KAAK2C,UAAU,aAAclB,IAE7BtB,QAAAyC,WAAW,0DAGb5C,KAAK6C,UAAU,sBAAsBC,EAAIC,qCAI7C3C","file":"index.min.js","sourcesContent":["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport {\r\n  getFirst,\r\n  getOptionalInput,\r\n  getOwnerAndRepo,\r\n  getRepository,\r\n  logWarning,\r\n  waitTime\r\n} from './utils';\r\n\r\nasync function run(): Promise<void> {\r\n  try {\r\n    const token = core.getInput('token', {required: true});\r\n    const workflow = core.getInput('workflow', {required: true});\r\n    const branch = core.getInput('branch');\r\n    const event = getOptionalInput('event');\r\n    const wait = core.getBooleanInput('wait');\r\n    let fullRepo = getOptionalInput('repo');\r\n    if (fullRepo === undefined) {\r\n      fullRepo = getRepository();\r\n    }\r\n\r\n    const [owner, repo] = getOwnerAndRepo(fullRepo);\r\n\r\n    core.info(`Checking result of ${workflow} from ${fullRepo}:${branch}`);\r\n\r\n    const octokit = github.getOctokit(token);\r\n\r\n    let status: string | null = null;\r\n    let conclusion: string | null = null;\r\n\r\n    do {\r\n      const {\r\n        data: {workflow_runs}\r\n      } = await octokit.rest.actions.listWorkflowRuns({\r\n        owner,\r\n        repo,\r\n        workflow_id: workflow,\r\n        branch,\r\n        event,\r\n        per_page: 1\r\n      });\r\n\r\n      const latest = getFirst(workflow_runs);\r\n\r\n      status = latest?.status ?? null;\r\n      conclusion = latest?.conclusion ?? null;\r\n\r\n      if (wait && status !== 'completed') {\r\n        await waitTime(5 * 1000);\r\n        continue;\r\n      }\r\n    } while (false);\r\n\r\n    if (status !== null && conclusion !== null) {\r\n      core.info(`status: ${status}`);\r\n      core.info(`conclusion: ${conclusion}`);\r\n\r\n      core.setOutput('status', status);\r\n      core.setOutput('conclusion', conclusion);\r\n    } else {\r\n      logWarning('Workflow run is missing');\r\n    }\r\n  } catch (err) {\r\n    core.setFailed(`Failed with error: ${err.message}`);\r\n  }\r\n}\r\n\r\nrun();\r\n"]}